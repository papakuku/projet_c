
|    VIM   |


: help windows.txt
:help tabpage.txt
:Tabnew600
:Explore
:Netrw
:buff 1



sudo apt install vim
sudo apt install curl
dans la logitech install GVim
do apt install gnome-tweaks



vi ~/.vimrc :



set number
set relativenumber
set tabstop=4
set shiftwidth=4
set autoindent
set mouse=a
 


call  plug#begin()

Plug 'vim-airline/vim-airline'
Plug  'scrooloose/nerdtree'


call  plug#end()


!racourci nerdtree

:map  <C-n>  :NERDTree    
:map <C-y> "+y
:map <C-p> "+p



:ligne de commande pour ajouter vim-plugin:

curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

dans vim:        Plug Install



Ps:        ctrl+c            ctrl+shift +v
              ctrl+shift+y         ctrl+v

-----------------------------------------------------------------------------
Quickfixlist tuto:
https://vimdoc.sourceforge.net/htmldoc/quickfix.html#quickfix-window
----------------------------------------------------------------------------

      --------------
      |  NOTICE :  |
      --------------



:q! pour sortir sans enregister du fichier vim
:wq pour sortir en enrgistrant
:w  pour enregistrer


i   pour le insert mod     l'ecriture apparait avant le curseur
a   pour le insert mod     l'ecriture apparait apres le curseur
o   pour le inser mod      l'ecriture apparait a la ligne d'apres

I   pour le insert mod     l'ecriture apparait en debut de ligne     
A   pour le insert mod     l'ecriture apparait en fin de ligne
O   pour le insert mod     l'ecriture apparait la ligne d'avant


 escap =  goout to  inser mod


ctrl+r    = go on
u         = go back
.         = execute the command just executed before 

r + <lettre>  = change the letter by other letter

             "delet mean cut"
d =delet
dd =delet the all line
D  =capital D delet the rest of the line
diw =delet inner word
d0 =delette the begining of the line
d$ = delet the end of the line


               "c =change"

cc =delet end go in insert mode
ciw =change inner word
ci" = change everything inside the quotation mark
ci( = change everything inside the parenthese
ci< = change everything inside the angle bracket
ci{ = change everything inside the curly bracket
ci[ = change everything inside the sqare bracket



y =copy
yy =copy the full line


p =paste after
P = capital p paste before
5p5 =paste five time five word



w = jump to the next word
b = back to the previous word

0 = back to the begining of the line
$ = go to the end of the line

% = for jump from beginimg curly bracket to the end

t+<lettre> = jump to the next leter
f+<lettre> = back-jump to the previous leter



gg = jump to begining file
G =jump to the end of the file
zz= center your text



: 100  = send you to the line 100


visual mode....select line+ >  = edentation on right
visual mode....select line+ >  = edentation on left

select line and "="      = edentation all the script selelected
gg=G endent propably all the text

/ <word>  = jump to the word inside the script 
/ <word>  +n   =jump to the word and and jump to the next similar word
/ <word>  +N   =jump-back to the pevious word
? <word>   =  do same but from the end to the beginig


m + <letter> = fix one line  in the script
' + <letter> = jump to this line

:s%/word_selected/new_word/g  = all the word selected will be change by the new word

<visual mode > :s/word_selected/new_word/g = change the vord only in the part selct by visual


:reg   = acces to register
------------
if you copy script and after you want delete other script and paste your script copy 
 you must use "0p   =register last move zero and paste
------------


       |macros|

:q<letter>       "  writing macros"               q

@<letter>   execute your macros


files: 



:n Or :bn - switch to the next file

:N Or :bp - switch to the previous file

:bf - switch to the first file

:bl - switch to the last file

:b number - switch to a specific file number(for file number 3, use the command “b 3”):

:b filename - switch to a specific file filename(for file name file1, use “:b file1”)

:wall - save all open files

:bw - quit the current file

qall - quit all open files

:qall! - forcefully quit all the files, discarding the changes:


  | BUFFER |

  :edit   /   :e         =  open a file
  :badd                  = open file in background
  :sp     / :split                  =  split
:vs    /   vsplit     =  split in vertical
:ls / :files / :buffers     =   show the buffers open

:buffer / :buffer <file>     = move to the buffer file
:bufferN   = move to the buffer number N
:bp /bufferprevious     =   move to the previous buffer
:bn / buffernext  = move to the next buffer
:bl       =  jump to the last buffer
:bf / bfirst = jump to the first buffer

;ball    =open all buffer in horizontal
:vertical ball =open all buffer in vertical

-----------------------TRY:


Let's look at another example. Here, I made a few edits to 'a.rs' file and hid it using :set hidden command. Then I switched to editing 'main.c' without writing out any modifications that I made to 'a.rs'.

And now the flags of 'a.rs' indicate exactly that with #h + flags.

# -> It was the last file to be edited in the current window (before I switched to editing 'main.c')
h -> It is a hidden buffer
+ -> It was modified but changes weren't saved to the disk

---------------------------------------------


:bdelete / :bd      = delete the buffer
:1,4bd                   =delete the buffer 1,2,3,,4






(:set hidden) in .vimrc         no message when you swich between buffer no save 
----------------------------------------------------------------------------------------------
% : Buffer which is in the current window
# : Alternate buffer (the last file which was most recently edited in the current window)
a : Active buffer (the file which is being edited in the current window)
h : Hidden buffer (buffer with unsaved modifications but is not being displayed in any window)
u : Unlisted buffer (files that are not open in Vim but are present in the current working directory; use :ls! to view this)
- : Buffer with 'modifiable' set to off
= : A read-only buffer
+ : A modified buffer (buffer with changes that are not written to disk)
x : A buffer that has read errors
-----------------------------------------------------------------------------------------------










|  tab |



tabnew =create new tab
tabe = edittab with file
tabs = list all tab and file
gt   = (next tab (in normal mode)
gT = previous tab (in normal mode)
tabn = next tab  (command mode)
tanbp = previous tab (command mode)


:tab ball show each buffer in a tab (up to 'tabpagemax' tabs) 

:tab help open a new help window in its own tab page 

:tab drop {file} open {file} in a new tab, or jump to a window/tab containing the file if there is one 

:tab split copy the current window to a new tab of its own





tabs list all tabs including their displayed windows :tabm 0 move current tab to first 

:tabm move current tab to last :tabm {i} move current tab to position i+1

 :tabm +{i} move current tab right to current position+i 

:tabm -{i} move current tab left to current position-i 

:tabn go to next tab 

:tabp go to previous tab 

:tabfirst go to first tab

 :tablast go to last tab 

In normal mode, you can type:

gt go to next tab gT go to previous tab {i}gt go to tab in position i






